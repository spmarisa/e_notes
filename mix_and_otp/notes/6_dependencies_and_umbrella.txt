instead of adding more code to the kv application, we are going to build the TCP server as another application that is a client of the kv application.

Since the whole runtime and Elixir ecosystem are geared towards applications, it makes sense to break our projects into smaller applications that work together rather than building a big, monolithic app.

Before creating our new application, we must discuss how Mix handles dependencies. In practice, there are two kinds of dependencies we usually work with: internal and external dependencies. Mix supports mechanisms to work with both of them.

##############################################################################################################################
EXTERNAL DEPENDENCIES

the ones not tied to your business domain. For example, if you need a HTTP API for your distributed KV application, you can use the Plug project as an external dependency.


INTERNAL DEPENDENCIES
Internal dependencies are the ones that are specific to your project. They usually don’t make sense outside the scope of your project/company/organization. Most of the time, you want to keep them private, whether due to technical, economic or business reasons.

If you have an internal dependency, Mix supports two methods to work with them: git repositories or umbrella projects.

For example, if you push the kv project to a git repository, you’ll need to list it in your deps code in order to use it:

def deps do
  [{:kv, git: "https://github.com/YOUR_ACCOUNT/kv.git"}]
end


 we expect you to frequently break your code into applications that can be organized logically, even within a single project.


Umbrella projects allow you to create one project that hosts many applications while keeping all of them in a single source code repository. That is exactly the style we are going to explore

create a new Mix project. We are going to creatively name it kv_umbrella, and this new project will have both the existing kv application and the new kv_server application inside.
+ kv_umbrella
  + apps
    + kv
    + kv_server



The interesting thing about this approach is that Mix has many conveniences for working with such projects, such as the ability to compile and test all applications inside apps with a single command. However, even though they are all listed together inside apps, they are still decoupled from each other, so you can build, test and deploy each application in isolation if you want to.

#########################################################################################################################
UMBRELLA PROJECTS

mix new kv_umbrella --umbrella

cd kv_umbrella/apps

mix new kv_server --module KVServer --sup


all dependencies will be checked out to kv_umbrella/deps, and they will share the same build, config and lock files. This ensures dependencies will be fetched and compiled once for the whole umbrella structure, instead of once per umbrella application.


apps/kv_server/mix.exs

defp deps do
  [{:kv, in_umbrella: true}]
end

The line above makes :kv available as a dependency inside :kv_server and automatically starts the :kv application before the server starts.

copy the kv application we have built so far to the apps directory in our new umbrella project.
+ kv_umbrella
  + apps
    + kv
    + kv_server

modify apps/kv/mix.exs


now you can run tests for both projects using
mix test

#########################################################################################################################
