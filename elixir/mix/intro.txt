# If you’re familiar with Ruby mix is Bundler, RubyGems, and Rake combined. It’s a crucial part of any Elixir project and in this lesson we’re going to explore just a few of its great features. To see all that mix has to offer run mix help.

# Until now we’ve been working exclusively within iex which has limitations. In order to build something substantial we need to divide our code up into many files to effectively manage it; mix lets us do that with projects.


# NEW PROJECT
# When we’re ready to create a new Elixir project, mix makes it easy with the mix new command. This will generate our project’s folder structure and necessary boilerplate. This is pretty straightforward, so let’s get started:

mix new example

#From the output we can see that mix has created our directory and a number of boilerplate files:
#* creating README.md
#* creating .gitignore
#* creating mix.exs
#* creating config
#* creating config/config.exs
#* creating lib
#* creating lib/example.ex
#* creating test
#* creating test/test_helper.exs
#* creating test/example_test.exs



#in the mix.exs file
#The first section we’ll look at is project. Here we define the name of our application (app), specify our version (version), #Elixir version (elixir), and finally our dependencies (deps).

#The application section is used during the generation of our application file which we’ll cover next.


#Interactive
#It may be necessary to use iex within the context of our application. Thankfully for us, mix makes this easy. We can start a #new iex session:

iex -S mix
#Starting iex this way will load your application and dependencies into the current runtime.


#Compilation
#Mix is smart and will compile your changes when necessary, but it may still be necessary explicitly compile your project. In this #section we’ll cover how to compile our project and what compilation does.

#To compile a mix project we only need to run mix compile in our base directory:

mix compile



#Managing Dependencies
#To add a new dependency we need to first add it to our mix.exs in the deps section. Our dependency list is comprised of tuples with #two required values and one optional: the package name as an atom, the version string, and optional options.

def deps do
  [{:phoenix, "~> 1.1 or ~> 1.2"},
   {:phoenix_html, "~> 2.3"},
   {:cowboy, "~> 1.0", only: [:dev, :test]},
   {:slime, "~> 0.14"}]
end

#Once we’ve defined our dependencies there is one final step: fetching them. This is analogous to bundle install:
 mix deps.get






#Environments

#Mix, much like Bundler, supports differing environments. Out of the box mix works with three environments:

#    :dev — The default environment.
#    :test — Used by mix test. Covered further in our next lesson.
#    :prod — Used when we ship our application to production.

#The current environment can be accessed using Mix.env. As expected, the environment can be changed via the MIX_ENV environment variable:

$ MIX_ENV=prod mix compile
