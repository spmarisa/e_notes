#in elixir the basic building block is a function
# functions transform data - take i/p performing some action and return some output
# for code maintainability - group similar functions together - this is where modules come in

List.inset_at - insert_at is a function in list module

only way to have a named function is to place it inside a module

#name is in pascal case

#defmodule is not a keyword, its a macro
#elixirs ability to metaprogram with macros
#elixir is able to do what it does is because of its macros


#iex
$iex "module_playground.exs"

> ModulePlayground.say_here

#to reload that module
> r(ModulePlayground)


#have a look at directives available to us

#first one is the import directive
#if we want to do anything in elixir we have to provide a fully specified module (ModulePlayground.say_here and another one IO.puts)

#using import we can specify that we want to include the IO module as part of our module, so we nolonger needed to specify IO.puts

$iex "module_playground.exs"
> ModulePlayground.say_here


#the best practice when importing module is to limit the functions only to those that you will be using in your module
#this helps reduce collisions between modules that might have the same name for a function

#while importing we can specify what functions we want

import IO, only: [puts: 1]




#even if we doesnt implicitly import Kernel in our module its there, infact kernel is imported into every module
#as there is only function, there is also except function

import Kernel, except: [inspect: 1]
#says everything in the kernel will be available in our module without prefixing it without a module name except for the inspect one
#its not a good idea to write a function that collides with kernel, in cases like those use except



#next directive will help reduce typing and could be used to avoid collisions that is alias directives

#create a misc.util.math module which is underneath out module playground
#go to root module and new function that uses our new math modules add function
>r(ModulePlayground)
>import_file("misc_util_math.exs")
>ModulePlayground.print_sum

#instead of long process we use an alias
>r(ModulePlayground)
>import_file("misc_util_math.exs")
>ModulePlayground.print_sum

#in case we want to avoid collisions b/w our math modules and some one elses math module, we can tell how to alias our module





#require directive - used to bring a macro into a module
#if a module is using a macro elixir needs to know during complie time that it should bring in that macro as well
#example - integer module - core part of elixir - provides two macros ( is_even, is_odd ) name says it all
#to import macro

require Integer


#import - include module functions / include or exclude specific functions
#alias - reduce typing / rename a module in your ModulePlayground
#require - allows using macros is your module

#all three directives at module level or even inside of a function and have them scoped specifically to that function






#more details of functions - enum functions
#elixir already has a robust enum module, our goal here is not to replace that
#writing a enum module will aid us in understanding some of the key concepts of elixirs modules and functions
#read more about macros and def is a macro

$ iex "sample_enum.exs"
Sample.Enum.first([1, 2, 3])

#Function Arity
{function name} / {number of parameters}
first/1






#DEFAULT PARAMETERS
#we can supply parameters to a function and specify a default value


  def add(list, val \\ 0) do
    [val | list]
  end

here see that "\\" that specifies the default value if the val is not specified

Sample.Enum.add([:a, :b])
Sample.Enum.add([:a, :b], :s)


# take the example below
  def first([], val \\ nil), do: val
  def first([head | _]), do: head
# we get an error, first/1 conflicts with defaults from first/2
# first/1 doesnt have a second parameter, elixir doesnt know what to do when we pass only 1 parameter
#swap the places
  def first([head | _]), do: head
  def first([], val \\ nil), do: val
#adding default for existing functions
  Sample.Enum.first([1, 2, 3])
  Sample.Enum.first([])
  Sample.Enum.first([], 5)

#its not particularly useful when we pass a list and a default value
  Sample.Enum.first([1, 2, 3], 0)

  #give a second parameter to method signature on first/1 it becomes first/2: that val will be tossed out
  def first([head | _], val), do: head
  def first([], val \\ nil), do: val

#now reload our module, we get a warning that multiple clauses with default values should define a function head with defaults
#we have to perform a function declaration without a body
  def first(list, val \\ nil)
  def first([head | _], _), do: head
  def first([], val), do: val

  Sample.Enum.first([1, 2,3])
  Sample.Enum.first([1, 2, 3], :ok)
  Sample.Enum.first([], :ok)
  Sample.Enum.first([])








#PRIVATE FUNCTIONS
same old private functions
  trace(:ok)
  defp trace(string) do
      IO.puts("The value passed in was #{string}")
  end


#in elixir functions are first class citizens, what does it mean for a function to be a first class citizen

#Elixir supports passing functions as ARGUMENTS to other functions, RETURNING them as the values from other functions, and
#ASSIGNING them to variables

#creating a module that contains utility functions

#we utilize enum module, elixir have a pretty extensive enum module that allows us to operate on various enums(such as lists)

#first one we look at will square a number

#first enum is the map function
#map will take a list and a function and will return a new list that is made up by passing each value in list to the function

list = [1, 2, 3, 4]

Enum.map(list, &Sample.Utils.square/1)

#we prefix our function with &, it is the capture operator and will get us a reference to the function
# we are using arity to specify which function (square/1 or square/2)
#this is an example of passing a function into another function as a parameter

#another example with reduce

Enum.reduce(list, 0, &Sample.Utils.sum/2)

#the sum parameter takes 2 params instead of 1
#the above is like passing one function to another function






#ANONYMOUS FUNCTIONS
#we can accomplish the same behaviour above as anonymous function
list = [1, 2, 3, 4]

#fn followed by the parameter list. everything between the "->" and "end" is the function body(lambda syntax functions in c#)
Enum.map(list, fn(x) -> x*x end)

#we can specify our anonymous functions take multiple parameters
# acc is our accumilator - its 0 for first run, then 1 .. then 2 ...etc
Enum.reduce(list, 0, fn(x, acc) -> acc + x end)

#we can still further reduce them using capture syntax by using capture syntax
Enum.map(list, &(&1 * &1))
Enum.reduce(list, 0, &(&1 + &2))

#whether we use named function, a lambda style anonymous function or a capture style anonymous function depends on clarity, readibility, reusability





#look at what it is like to call a function that is passed to one of your functions
  def custom_func(a, f) do
    f.(a)
  end
#this function takes a parameter "a" and a function "f" and performs the function on the parameter
  c("sample_utils.exs")
  Sample.Utils.custom_func(1, fn(x) -> IO.puts(x) end)

# to call a anonymous function we have to use a "." between function name and the parantheses
