#Enumerables


#    Enumerables
#    Eager vs Lazy
#    The pipe operator
#    Streams

#Elixir provides the concept of enumerables and the Enum module to work with them. We have already learned two enumerables: lists and maps.


 Enum.map([1, 2, 3], fn x -> x * 2 end)

 Enum.map(%{1 => 2, 3 => 4}, fn {k, v} -> k * v end)

#The Enum module provides a huge range of functions to transform, sort, group, filter and retrieve items from enumerables. It is one of the modules developers use frequently in their Elixir code.
#Elixir also provides ranges:

Enum.map(1..3, fn x -> x * 2 end)

Enum.reduce(1..3, 0, &+/2)


#The functions in the Enum module are limited to, as the name says, enumerating values in data structures. For specific operations, like inserting and updating particular elements, you may need to reach for modules specific to the data type. For example, if you want to insert an element at a given position in a list, you should use the List.insert_at/3 function from the List module, as it would make little sense to insert a value into, for example, a range.


#We say the functions in the Enum module are polymorphic because they can work with diverse data types. In particular, the functions in the Enum module can work with any data type that implements the Enumerable protocol. We are going to discuss Protocols in a later chapter; for now we are going to move on to a specific kind of enumerable called a stream.

###########################################################################################################################

#Eager vs Lazy

#All the functions in the Enum module are eager. Many functions expect an enumerable and return a list back:

odd? = &(rem(&1, 2) != 0)
##Function<6.80484245/1 in :erl_eval.expr/5>
Enum.filter(1..3, odd?)
#[1, 3]

#This means that when performing multiple operations with Enum, each operation is going to generate an intermediate list until we reach the result:

1..100_000 |> Enum.map(&(&1 * 3)) |> Enum.filter(odd?) |> Enum.sum
#7500000000

#The example above has a pipeline of operations. We start with a range and then multiply each element in the range by 3. This first operation will now create and return a list with 100_000 items. Then we keep all odd elements from the list, generating a new list, now with 50_000 items, and then we sum all entries.
