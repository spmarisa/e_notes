ANONYMOUS FUNCTIONS - As a functional language, Elixir has anonymous functions as a basic type.
A simple way to write a function is

fn (argument_list) -> body end.

But a function can have multiple bodies with multiple argument lists, guard clauses, and so on.





PATTERN MATCHING - Elixir uses = as a match operator.
 In traditional languages the equals operator is for assignment. In Elixir, the equals operators is for pattern matching.

So, that’s the way it works values in the left hand side. If they are variables they are bound to the right hand side,
if they are not variables elixir tries to match them with the right hand side.


PIN OPERATOR - Elixir provides a way to always force pattern matching against the variable in the left hand side, the pin operator.


LISTS - In Elixir, Lists look like arrays as we know it from other languages but they are not.
Lists are linked structures which consist of a head and a tail.


KEYWORD LISTS - Keyword Lists are a list of Tuple pairs.
You simply write them as lists. For instance: [{:one, 1}, 2, {:three, 3}].
There’s a shortcut for defining lists, here’s how it looks: [one: 1, three: 3].

In order to retrieve an item from a keyword list you can either use:
Keyword.get([{:one, 1}, 2, {:three, 3}], :one)

Or use the shortcut:
[{:one, 1}, 2, {:three, 3}][:one]
Because keyword lists are slow when retrieving a value, in it is an expensive operation,
so if you are storing data that needs fast access you should use a Map.


MAPS - Maps are an efficient collection of key/value pairs.
The key can have any value you want as a key, but usually should be the same type.
Different from keyword lists, Maps allow only one entry for a given key.
They are efficient as they grow and they can be used in the Elixir pattern matching in general use maps when you need an associative array.

Here’s how you can write a Map:

%{ :one => 1, :two => 2, 3 => 3, "four" => 4, [] => %{}, {} => [k: :v]}











comparision(==, !=, ===, !==, >, >=, <, <=)
boolean(and, or, not)
arithmetic(+, -, *, /)
binary concatination <>
"in" operator

Type Check functions

Additional functions

abs(number)
binary_part(binary, start, length)
bit_size(bitstring)
byte_size(bitstring)
div(integer, integer)
elem(tuple, n)
hd(list)
length(list)
map_size(map)
node()
node(pid | ref | port)
rem(integer, integer)
round(number)
self()
tl(list)
trunc(number)
tuple_size(tuple)
