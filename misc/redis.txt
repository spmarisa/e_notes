wget http://download.redis.io/releases/redis-3.2.8.tar.gz
tar xzf redis-3.2.8.tar.gz
cd redis-3.2.8
make
make install

redis-server
redis-cli

#set a value
    SET foo bar

#get a value
    GET foo

#INCR to atomically increment a number stored at a given key:
    SET connections 10
    INCR connections
    INCR connections

#to delete a given key and associated value
    DEL connections
    INCR connections

#SET-if-not-exists (called SETNX on Redis) that sets a key only if it does not already exist

#Redis can be told that a key should only exist for a certain length of time. This is accomplished with the EXPIRE and TTL commands.
    SET resource:lock "Redis Demo"
    EXPIRE resource:lock 120
    TTL resource:lock
    GET resource:lock

#puts a new value at the end of the list
    RPUSH friends "alice"
    RPUSH friends "bob"

#puts a new value at the beginning of the list
    LPUSH friends "sam"

#to get the subset of the list
    LRANGE friends 0 -1
    LRANGE friends 0 2

#length of the list
    LLEN friends

#removes the first element and returns it
    LPOP friends

#removes the last element and returns it
    RPOP friends

#set datastructure
#add a given value to the set
    SADD food "banana"
    SADD food "fish"
    SADD food "milk"

#remove the given value from the set
    SREM food "milk"

#tests if the given value is in the set.
    SISMEMBER food "fish"
    SISMEMBER food "chicken"

#to return all the members of the set
    SMEMBERS food

#combine two or more sets
    SADD birdpowers "pecking"
    SADD birdpowers "flight"
    SUNION food birdpowers


#SORTED SETS
#A sorted set is similar to a regular set, but now each value has an associated score. This score is used to sort the elements in the set.

    ZADD hackers 1940 "Alan Kay"
    ZADD hackers 1906 "Grace Hopper"
    ZADD hackers 1953 "Richard Stallman"
    ZADD hackers 1965 "Yukihiro Matsumoto"
    ZADD hackers 1916 "Claude Shannon"
    ZADD hackers 1969 "Linus Torvalds"
    ZADD hackers 1957 "Sophie Wilson"
    ZADD hackers 1912 "Alan Turing"


     ZRANGE hackers 2 4


#HASHES
#Redis Hashes are maps between string fields and string values, so they are the perfect data type to represent objects
  HSET user:1000 name "John Smith"
  HSET user:1000 email "john.smith@example.com"
  HSET user:1000 password "s3cret"

#To get back the saved data use HGETALL:
  HGETALL user:1000

#You can also set multiple fields at once:
  HMSET user:1001 name "Mary Jones" password "hidden" email "mjones@example.com"

#If you only need a single field value that is possible as well:
  HGET user:1001 name => "Mary Jones"



#Numerical values in hash fields are handled exactly the same as in simple strings and there are operations to increment this value in an atomic way.

    HSET user:1000 visits 10
    HINCRBY user:1000 visits 1
    HINCRBY user:1000 visits 10
    HDEL user:1000 visits
    HINCRBY user:1000 visits 1 



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DATA TYPES

STRINGS - Redis Strings are binary safe, this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.
MAX - 512 mb

LISTS - Redis Lists are simply lists of strings,  sorted by insertion order
MAX - 2 ^ 32 -1

SETS - Redis Sets are an unordered collection of Strings, It is possible to add, remove, and test for existence of members in O(1)
MAX - 2 ^ 32 -1

HASHES - Redis Hashes are maps between string fields and string values, so they are the perfect data type to represent objects
Every hash can store up to 232 - 1 field-value pairs

SORTED LISTS - Redis Sorted Sets are, similarly to Redis Sets, non repeating collections of Strings. The difference is that every member of a Sorted Set is associated with score, that is used in order to take the sorted set ordered, from the smallest to the greatest score. While members are unique, scores may be repeated.
