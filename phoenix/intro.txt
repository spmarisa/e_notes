web development framework written in elixir, which implements server side mvc

high developer productivity and high application performance.

It also has some interesting new twists like channels for implementing realtime features and pre-compiled templates for blazing speed.


Phoenix is actually the top layer of a multi-layer system designed to be modular and flexible.

The other layers include Plug, and Ecto, which we will cover right after Phoenix in this overview.

The Erlang HTTP server, Cowboy, acts as the foundation for Plug and Phoenix
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Phoenix is made up of a number of distinct parts, each with its own purpose and role to play in building a web application. We will cover them all in depth throughout these guides, but here's a quick breakdown.

    The Endpoint
        handles all aspects of requests up until the point where the router takes over
        provides a core set of plugs to apply to all requests
        dispatches requests into a designated router

    The Router
        parses incoming requests and dispatches them to the correct controller/action, passing parameters as needed
        provides helpers to generate route paths or urls to resources
        defines named pipelines through which we may pass our requests
        Pipelines
            allow easy application of groups of plugs to a set of routes

    Controllers
        provide functions, called actions, to handle requests
        Actions
            prepare data and pass it into views
            invoke rendering via views
            perform redirects

    Views
        render templates
        act as a presentation layer
        define helper functions, available in templates, to decorate data for presentation

    Templates
        are what they sound like :)
        are precompiled and fast

    Channels
        manage sockets for easy realtime communication
        are analogous to controllers except that they allow bi-directional communication with persistent connections

    PubSub
        underlies the channel layer and allows clients to subscribe to topics
        abstracts the underlying pubsub adapter for third-party pubsub integration


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
think of any webserver as a function
