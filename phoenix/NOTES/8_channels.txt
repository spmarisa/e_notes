Channels are a really exciting and powerful part of Phoenix that allow us to easily add soft-realtime features to our applications.

Channels are based on a simple idea - sending and receiving messages.

Senders broadcast messages about topics. Receivers subscribe to topics so that they can get those messages. Senders and receivers can switch roles on the same topic at any time.



Since Elixir is based on message passing, you may wonder why we need this extra mechanism to send and receive messages.
With Channels, neither senders nor receivers have to be Elixir processes.

They can be anything that we can teach to communicate over a Channel - a JavaScript client, an iOS app, another Phoenix application, our watch.

Also, messages broadcast over a Channel may have many receivers. Elixir processes communicate one to one.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THE MOVING PARTS

SOCKET HANDLERS ->
Phoenix holds a single connection to the server and multiplexes your channel sockets over that one connection.    Socket handlers, such as web/channels/user_socket.ex, are modules that authenticate and identify a socket connection and allow you to set default socket assigns for use in all channels.

CHANNEL ROUTES ->
These are defined in Socket handlers, such as web/channels/user_socket.ex, which makes them distinct from other routes. They match on the topic string and dispatch matching requests to the given Channel module. The star character * acts as a wildcard matcher, so in the following example route, requests for sample_topic:pizza and sample_topic:oranges would both be dispatched to the SampleTopicChannel.

channel "sample_topic:*", HelloPhoenix.SampleTopicChannel


CHANNELS ->

PUBSUB ->

MESSAGES ->

TOPICS ->

TRANSPORTS ->

TRANSPORT ADAPTERS ->

CLIENT LIBRARIES ->


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BUILDING A CHAT APPLICATION

after generating a new phoenix app. we'll see that the endpoint is already setup for us in lib/hello_phoenix/endpoint.ex

In web/channels/user_socket.ex, the HelloPhoenix.UserSocket we pointed to in our endpoint has already been created when we generated our application. We need to make sure messages get routed to the correct channel.

To do that, uncomment the "room:*" channel definition:

Now, whenever a client sends a message whose topic starts with "room:", it will be routed to our RoomChannel. Next, we'll define a HelloPhoenix.RoomChannel module to manage our chat room messages.



JOINING CHANNELS
The first priority of your channels is to authorize clients to join a given topic. For authorization, we must implement join/3 in web/channels/room_channel.ex.
