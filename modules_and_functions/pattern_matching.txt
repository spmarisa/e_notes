
#PATTERN MATCHING
#we can get elements from a tuple or a list by using pattern matching we can apply same to functions

Sample.Enum.first([1, 2, 3, 4])

#try the same with empty list - from elixir prespective an empty list neither has a head or a tail, trying to fetch one throws an error
Sample.Enum.first([])

#elixir throws a warning if a variable is unused - replace it with _
#in pattern matching _ will match the value but discard it

#now we can pass in a list or an empty list we get a result back because of pattern matching
#we have 2 instances of "first" with different patterns - 1st one will match if its empty and 2nd one if its not empty

#for a bit of simplicity

   def first([]) do
     nil
   end

  def first([]), do: nil

#some more pattern matching

def some_func(quantity, {_, _, price}) do
  quantity * price
end

def some_func(quantity, book) do
  quantity * elem(book, 2)
end





#more complex test than pattern matching - elixir allows that with guard classes
#for a calender module to check if it is leap year

c("calendar.exs")

Sample.Calendar.is_leap_year(2016)

#more complex logic can be used in our guard clauses, not all elixir functions are available in guard clauses
#comparison, boolean, arithmetic, the binary concatination and the "in" operator as long as the right side is a range or a list are allowed
#we can have type check functions - is_atom - is_binary - is_bitstring - is_boolean - is_float - is_function/1 - is_function/2
#                                 - is_integer - is_list - is_map - is_nil - is_number - is_pid - is_port - is_reference - is_tuple  
